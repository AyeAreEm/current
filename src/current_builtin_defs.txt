#ifndef CURRENT_DEFS_H
#define CURRENT_DEFS_H

#include <stdint.h>
#include <stddef.h>
#include <string.h>
#include <stdbool.h>

#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__NetBSD__) || defined(__sun) || defined(__CYGWIN__)
#include <sys/types.h>
#elif defined(_WIN32) || defined(__MINGW32__)
#include <BaseTsd.h>
typedef SSIZE_T ssize_t;
#endif

typedef int8_t i8;
typedef int16_t i16;
typedef int32_t i32;
typedef int64_t i64;
typedef ssize_t isize;

typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
typedef uint64_t u64;
typedef size_t usize;

typedef float f32;
typedef double f64;

typedef struct CurString {
    const char *ptr;
    usize len;
} CurString;
#define curstr(s) ((CurString){.ptr = s, strlen(s)})

#define CurArray1dDef(T, Tname, A)\
typedef struct CurArray1d_##Tname##A {\
    T *ptr;\
    const usize len;\
} CurArray1d_##Tname##A;\
CurArray1d_##Tname##A curarray1d_##Tname##A(T *ptr, usize len);\

#define CurArray1dImp(T, Tname, A)\
CurArray1d_##Tname##A curarray1d_##Tname##A(T *ptr, usize len) {\
    CurArray1d_##Tname##A ret = (CurArray1d_##Tname##A){.len = len};\
    ret.ptr = ptr;\
    return ret;\
}

#define CurArray2dDef(T, Tname, A, B)\
typedef struct CurArray2d_##Tname##B##A {\
    CurArray1d_##Tname##A* ptr;\
    const usize len;\
} CurArray2d_##Tname##B##A;\
CurArray2d_##Tname##B##A curarray2d_##Tname##B##A(CurArray1d_##Tname##A *ptr, usize len);\

#define CurArray2dImp(T, Tname, A, B)\
CurArray2d_##Tname##B##A curarray2d_##Tname##B##A(CurArray1d_##Tname##A *ptr, usize len) {\
    CurArray2d_##Tname##B##A ret = (CurArray2d_##Tname##B##A){.len = len};\
    ret.ptr = ptr;\
    return ret;\
}

#define CurSliceDef(T, Tname)\
typedef struct CurSlice_##Tname {\
    T *ptr;\
    usize len;\
} CurSlice_##Tname;\
CurSlice_##Tname curslice_##Tname(T *ptr, usize len);

#define CurSliceImp(T, Tname)\
CurSlice_##Tname curslice_##Tname(T *ptr, usize len) {\
    CurSlice_##Tname ret = (CurSlice_##Tname){.len = len};\
    ret.ptr = ptr;\
    return ret;\
}

#define CurOptionDef(T, Tname)\
typedef struct CurOption_##Tname {\
    T some;\
    bool ok;\
} CurOption_##Tname;\
CurOption_##Tname curoption_##Tname(T some);\
CurOption_##Tname curoptionnull_##Tname();\

#define CurOptionImp(T, Tname)\
CurOption_##Tname curoption_##Tname(T some) {\
    CurOption_##Tname ret;\
    ret.some = some;\
    ret.ok = true;\
    return ret;\
}\
CurOption_##Tname curoptionnull_##Tname() {\
    CurOption_##Tname ret;\
    ret.ok = false;\
    return ret;\
}

